#BlueJ class context
comment0.target=OrganisationChart
comment0.text=\ <description\ of\ class\ OrganisationChart>\n
comment1.params=
comment1.target=void\ setupGUI()
comment1.text=\n\ Set\ up\ the\ GUI\ (buttons\ and\ mouse)\n
comment10.params=pos\ subtree
comment10.target=boolean\ inSubtree(Position,\ Position)
comment10.text=\ [COMPLETION\:]\n\ Return\ true\ if\ position\ is\ in\ the\ subtree,\ and\ false\ otherwise\n\ Uses\ \=\=\ to\ determine\ node\ equality\n\ \ Check\ if\ positition\ is\ the\ same\ as\ the\ root\ of\ subTree\n\ \ if\ not,\ check\ if\ in\ any\ of\ the\ subtrees\ of\ the\ team\ members\ of\ the\ root\n\ \ (recursive\ call,\ which\ must\ return\ true\ if\ it\ finds\ the\ position)\n
comment11.params=
comment11.target=void\ saveTree()
comment11.text=\n\ Method\ to\ save\ the\ tree\ to\ a\ file.\ \n
comment12.params=outfile\ pos
comment12.target=void\ saveNode(java.io.PrintStream,\ Position)
comment12.text=\n\ A\ recursive\ method\ that\ traverses\ the\ tree\n\ Printing\ to\ the\ outfile\ if\ it\ is\ a\ question\ or\ answer.\n\ For\ saving\ the\ tree\ to\ a\ file.\ \n
comment13.params=
comment13.target=void\ loadTree()
comment13.text=\n\ Loads\ in\ a\ tree\ if\ it\ has\ the\ right\ file\ layout\n
comment14.params=manager\ offset
comment14.target=void\ loadNode(Position,\ double)
comment14.text=\n\ Loads\ in\ the\ nodes\ recursivley\ \n
comment15.params=
comment15.target=void\ redraw()
comment15.text=\n\ Redraw\ the\ entire\ organisation\ chart.\n
comment16.params=
comment16.target=void\ drawNewIcon()
comment16.text=\n\ Redraw\ the\ new\ Person\ box\n
comment17.params=
comment17.target=void\ drawRetireIcon()
comment17.text=\n\ Redraw\ the\ remove\ Icon\n
comment18.params=x\ y
comment18.target=boolean\ onNewIcon(double,\ double)
comment18.text=is\ the\ mouse\ position\ on\ the\ New\ Position\ box
comment19.params=x\ y
comment19.target=boolean\ onRemoveIcon(double,\ double)
comment19.text=is\ the\ mouse\ position\ on\ the\ remove\ icon
comment2.params=
comment2.target=void\ initialiseChart()
comment2.text=\n\ initialise\ the\ root\ of\ the\ organisation\n
comment20.params=
comment20.target=void\ makeTestTree()
comment20.text=\n\ Makes\ an\ initial\ tree\ so\ you\ can\ test\ your\ program\n
comment21.params=posn\ indent
comment21.target=void\ printTree(Position,\ java.lang.String)
comment22.params=arguments
comment22.target=void\ main(java.lang.String[])
comment3.params=v
comment3.target=void\ setRole(java.lang.String)
comment3.text=If\ a\ Position\ has\ been\ selected,\ update\ the\ name\ of\ the\ role\ of\ this\ position
comment4.params=action\ x\ y
comment4.target=void\ doMouse(java.lang.String,\ double,\ double)
comment4.text=\n\ Most\ of\ the\ work\ is\ initiated\ by\ the\ mouse.\n\ \n\ The\ action\ depends\ on\ where\ the\ mouse\ is\ pressed\:\n\ \ \ on\ the\ new\ icon,\n\ \ \ a\ Position\ in\ the\ tree,\ or\n\ and\ where\ it\ is\ released\:\n\ \ \ on\ the\ same\ Position,\n\ \ \ another\ Position\ in\ the\ tree,\n\ \ \ on\ the\ delete\ Icon,\ or\n\ \ \ empty\ space\n\ \n\ See\ the\ table\ in\ the\ assignment\ description.\n\ The\ method\ follows\ the\ structure\ of\ the\ table.\n
comment5.params=pos
comment5.target=void\ drawTree(Position)
comment5.text=\ [STEP\ 1\:]\n\ \ Recursive\ method\ to\ draw\ all\ nodes\ in\ a\ subtree,\ given\ the\ root\ node.\n\ \ (The\ provided\ code\ just\ draws\ the\ root\ node;\n\ \ you\ need\ to\ make\ it\ draw\ all\ the\ nodes.)\n
comment6.params=x\ y\ pos
comment6.target=Position\ findPosition(double,\ double,\ Position)
comment6.text=\ \n\ Find\ and\ return\ a\ Position\ that\ is\ currently\ placed\ over\ the\ point\ (x,y).\ \n\ Must\ do\ a\ recursive\ search\ of\ the\ subtree\ whose\ root\ is\ the\ given\ Position.\n\ [STEP\ 2\:]\ \n\ \ \ \ Returns\ a\ Position\ if\ it\ finds\ one,\n\ \ \ \ Returns\ null\ if\ it\ doesn't.\n\ [Completion\:]\ If\ (x,y)\ is\ under\ two\ Positions,\ it\ should\ return\ the\ top\ one.\n
comment7.params=newPos\ target
comment7.target=void\ addNewPosition(Position,\ Position)
comment7.text=\ [STEP\ 2\:]\ \n\ Add\ the\ new\ position\ to\ the\ target's\ team.\n\ Check\ the\ arguments\ are\ valid\ first.\n
comment8.params=pos\ target
comment8.target=void\ movePosition(Position,\ Position)
comment8.text=\ [STEP\ 2\:]\ \n\ \ \ \ Move\ a\ current\ position\ (pos)\ to\ another\ position\ (target)\n\ \ \ \ by\ adding\ the\ position\ to\ the\ team\ of\ the\ target,\n\ \ \ \ (and\ bringing\ the\ whole\ subtree\ of\ the\ position\ with\ them)\n\ \ \ \ Check\ the\ arguments\ are\ valid\ first.\n\n\ [COMPLETION\:]\n\ \ \ Moving\ any\ position\ to\ a\ target\ that\ is\ in\ the\n\ \ \ position's\ subtree\ is\ a\ problem\ and\ should\ not\ be\ allowed.\ (Why?)\n\ \ \ (one\ consequence\ is\ that\ the\ CEO\ position\ can't\ be\ moved\ at\ all)\n
comment9.params=pos
comment9.target=void\ removePosition(Position)
comment9.text=\ [STEP\ 2\:]\n\ Remove\ a\ position\ by\ removing\ it\ from\ the\ tree\ completely.\n\ The\ position\ cannot\ be\ a\ manager\ of\ another\ position.\n\ If\ this\ removes\ the\ current\ selected\ position,\ then\ there\n\ \ should\ now\ be\ no\ selected\ position\n
numComments=23
